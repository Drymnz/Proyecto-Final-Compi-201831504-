/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var importaciones = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,10,43,47,48,49,50,51],$V1=[2,4],$V2=[1,5],$V3=[1,6],$V4=[2,30],$V5=[1,18],$V6=[1,11],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,22],$Vd=[1,23],$Ve=[1,28],$Vf=[5,9,10,13,43,47,48,49,50,51],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[5,9,10,13,15,16,17,18,19,20,22,43,47,48,49,50,51],$Vn=[1,40],$Vo=[1,42],$Vp=[2,66],$Vq=[1,52],$Vr=[1,46],$Vs=[1,47],$Vt=[1,50],$Vu=[1,51],$Vv=[1,45],$Vw=[5,10,43,47,48,49,50,51,64],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,82],$VO=[5,10,15,16,17,18,19,20,22,25,26,27,28,33,34,35,36,37,38,39,43,47,48,49,50,51,57,64],$VP=[5,10,15,16,17,18,19,20,22,43,47,48,49,50,51,57,64],$VQ=[2,63],$VR=[1,116],$VS=[2,49],$VT=[1,119],$VU=[10,47,48,49,50,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"documentacion":4,"EOF":5,"import":6,"instrucciones":7,"importar_incerteza":8,"IMPORTAR":9,"ID":10,"PUNTO":11,"CLR":12,"INCERTEZA":13,"operacion_aritmetica":14,"POW":15,"POR":16,"DIV":17,"MOD":18,"MAS":19,"MEN":20,"P_APERTURA":21,"P_CIERRE":22,"NUMERO":23,"operacion_logica":24,"AND":25,"AD_AND":26,"OR":27,"AD":28,"boolean":29,"TRUE":30,"FALSE":31,"operacion_relacionales":32,"MAYOR_IGUAL":33,"MENOR_IGUAL":34,"IGUAL_IGUAL":35,"AD_IGUAL":36,"MAYOR":37,"MENOR":38,"EQUIVALENCIA":39,"variable_global_metodo_reasignacion":40,"tipos_variables":41,"variable_metodo":42,"VOID":43,"metodos_archivo":44,"reasignacion_varable":45,"variable_global":46,"DOUBLE":47,"BOOLEAN":48,"STRING":49,"INT":50,"CHAR":51,"parametros_metodo":52,"DOUBLE_PUNTO":53,"instrucciones_locales":54,"parametros":55,"secuencia_parametros":56,"COMA":57,"tabulaciones":58,"habito_local":59,"variable_local":60,"usar_varaible":61,"usar_varaible_factorizacion":62,"secuencia_datos":63,"TABULADOR":64,"tabulaciones_factorizada":65,"datos":66,"secuencia_datos_factorizado":67,"varias_declaraciones":68,"asignaciones_variable":69,"IGUAL":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"IMPORTAR",10:"ID",11:"PUNTO",12:"CLR",13:"INCERTEZA",15:"POW",16:"POR",17:"DIV",18:"MOD",19:"MAS",20:"MEN",21:"P_APERTURA",22:"P_CIERRE",23:"NUMERO",25:"AND",26:"AD_AND",27:"OR",28:"AD",30:"TRUE",31:"FALSE",33:"MAYOR_IGUAL",34:"MENOR_IGUAL",35:"IGUAL_IGUAL",36:"AD_IGUAL",37:"MAYOR",38:"MENOR",39:"EQUIVALENCIA",43:"VOID",47:"DOUBLE",48:"BOOLEAN",49:"STRING",50:"INT",51:"CHAR",53:"DOUBLE_PUNTO",57:"COMA",64:"TABULADOR",70:"IGUAL"},
productions_: [0,[3,2],[4,2],[6,2],[6,0],[8,4],[8,2],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,1],[24,3],[24,3],[24,3],[24,2],[24,3],[24,1],[29,1],[29,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[7,0],[7,2],[40,3],[40,3],[40,1],[42,1],[42,1],[41,1],[41,1],[41,1],[41,1],[41,1],[44,5],[52,0],[52,1],[55,3],[56,0],[56,2],[54,3],[54,0],[59,1],[59,1],[61,2],[62,3],[62,2],[62,0],[60,3],[58,2],[65,0],[65,1],[63,2],[63,0],[67,3],[67,0],[46,2],[68,3],[68,0],[45,2],[69,2],[66,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[66,1],[66,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,8:4,9:$V2,13:$V3}),{1:[3]},{5:[1,7]},{5:$V4,7:8,10:$V5,40:9,41:10,43:$V6,45:12,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb},o($V0,$V1,{8:4,6:19,9:$V2,13:$V3}),{10:[1,20]},{14:21,21:$Vc,23:$Vd},{1:[2,1]},{5:[2,2]},{5:$V4,7:24,10:$V5,40:9,41:10,43:$V6,45:12,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb},{10:[1,25]},{10:[1,26]},o($V0,[2,34]),{10:[2,37]},{10:[2,38]},{10:[2,39]},{10:[2,40]},{10:[2,41]},{69:27,70:$Ve},o($V0,[2,3]),{11:[1,29]},o($Vf,[2,6],{15:$Vg,16:$Vh,17:$Vi,18:$Vj,19:$Vk,20:$Vl}),{14:36,21:$Vc,23:$Vd},o($Vm,[2,14]),{5:[2,31]},{21:$Vn,42:37,44:38,46:39,57:$Vo,68:41,70:$Vp},{21:$Vn,44:43},o($V0,[2,67]),{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:44},{12:[1,53]},{14:54,21:$Vc,23:$Vd},{14:55,21:$Vc,23:$Vd},{14:56,21:$Vc,23:$Vd},{14:57,21:$Vc,23:$Vd},{14:58,21:$Vc,23:$Vd},{14:59,21:$Vc,23:$Vd},{15:$Vg,16:$Vh,17:$Vi,18:$Vj,19:$Vk,20:$Vl,22:[1,60]},o($V0,[2,32]),o($V0,[2,35]),o($V0,[2,36]),{22:[2,43],41:63,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:61,55:62},{69:64,70:$Ve},{10:[1,65]},o($V0,[2,33]),o($Vw,[2,68],{15:$Vx,16:$Vy,17:$Vz,18:$VA,19:$VB,20:$VC,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN}),o($VO,[2,69]),{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:83},o($VO,[2,88]),o($VO,[2,89]),o($VO,[2,90]),o($VO,[2,21]),o($VO,[2,22]),o($VO,[2,55],{62:84,11:[1,86],21:[1,85]}),o($Vf,[2,5]),o($Vm,[2,7]),o([5,9,10,13,16,18,19,20,22,43,47,48,49,50,51],[2,8],{15:$Vg,17:$Vi}),o([5,9,10,13,16,17,18,19,20,22,43,47,48,49,50,51],[2,9],{15:$Vg}),o([5,9,10,13,18,19,20,22,43,47,48,49,50,51],[2,10],{15:$Vg,16:$Vh,17:$Vi}),o([5,9,10,13,19,22,43,47,48,49,50,51],[2,11],{15:$Vg,16:$Vh,17:$Vi,18:$Vj,20:$Vl}),o([5,9,10,13,19,20,22,43,47,48,49,50,51],[2,12],{15:$Vg,16:$Vh,17:$Vi,18:$Vj}),o($Vm,[2,13]),{22:[1,87]},{22:[2,44]},{10:[1,88]},o($Vw,[2,64]),{57:$Vo,68:89,70:$Vp},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:90},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:91},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:92},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:93},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:94},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:95},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:96},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:97},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:98},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:99},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:100},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:101},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:102},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:103},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:104},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:105},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:106},{15:$Vx,16:$Vy,17:$Vz,18:$VA,19:$VB,20:$VC,22:[1,107],25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN},o($VO,[2,52]),{10:$Vq,21:$Vr,22:[2,61],23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,63:108,66:109},{10:$Vq,61:110},{53:[1,111]},{22:[2,46],56:112,57:[1,113]},{70:[2,65]},o($VP,[2,70],{25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN}),o([5,10,16,18,19,20,22,43,47,48,49,50,51,57,64],[2,71],{15:$Vx,17:$Vz,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN}),o([5,10,16,17,18,19,20,22,43,47,48,49,50,51,57,64],[2,72],{15:$Vx,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN}),o([5,10,18,19,20,22,43,47,48,49,50,51,57,64],[2,73],{15:$Vx,16:$Vy,17:$Vz,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN}),o([5,10,19,22,43,47,48,49,50,51,57,64],[2,74],{15:$Vx,16:$Vy,17:$Vz,18:$VA,20:$VC,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN}),o([5,10,19,20,22,43,47,48,49,50,51,57,64],[2,75],{15:$Vx,16:$Vy,17:$Vz,18:$VA,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN}),o([5,10,15,16,17,18,19,20,22,25,26,27,33,34,35,36,37,38,39,43,47,48,49,50,51,57,64],[2,76],{28:$VG}),o([5,10,15,16,17,18,19,20,22,26,27,33,34,35,36,37,38,39,43,47,48,49,50,51,57,64],[2,77],{25:$VD,28:$VG}),o([5,10,15,16,17,18,19,20,22,27,33,34,35,36,37,38,39,43,47,48,49,50,51,57,64],[2,78],{25:$VD,26:$VE,28:$VG}),o($VO,[2,79]),o($VP,[2,80],{25:$VD,26:$VE,27:$VF,28:$VG}),o($VP,[2,81],{25:$VD,26:$VE,27:$VF,28:$VG}),o($VP,[2,82],{25:$VD,26:$VE,27:$VF,28:$VG}),o($VP,[2,83],{25:$VD,26:$VE,27:$VF,28:$VG}),o($VP,[2,84],{25:$VD,26:$VE,27:$VF,28:$VG}),o($VP,[2,85],{25:$VD,26:$VE,27:$VF,28:$VG}),o($VP,[2,86],{25:$VD,26:$VE,27:$VF,28:$VG}),o($VO,[2,87]),{22:[1,114]},{15:$Vx,16:$Vy,17:$Vz,18:$VA,19:$VB,20:$VC,22:$VQ,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN,57:$VR,67:115},o($VO,[2,54]),o($V0,$VS,{54:117,58:118,64:$VT}),{22:[2,45]},{41:63,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,55:120},o($VO,[2,53]),{22:[2,60]},{10:$Vq,21:$Vr,23:$Vs,29:48,30:$Vt,31:$Vu,49:$Vv,61:49,66:121},o($V0,[2,42]),{10:$Vq,41:125,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,59:122,60:123,61:124},o($VU,[2,58],{65:126,58:127,64:$VT}),{22:[2,47]},{15:$Vx,16:$Vy,17:$Vz,18:$VA,19:$VB,20:$VC,22:$VQ,25:$VD,26:$VE,27:$VF,28:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:$VM,39:$VN,57:$VR,67:128},o($V0,$VS,{58:118,54:129,64:$VT}),o($Vw,[2,50]),o($Vw,[2,51]),{10:[1,130]},o($VU,[2,57]),o($VU,[2,59]),{22:[2,62]},o($V0,[2,48]),{46:131,57:$Vo,68:41,70:$Vp},o($Vw,[2,56])],
defaultActions: {7:[2,1],8:[2,2],13:[2,37],14:[2,38],15:[2,39],16:[2,40],17:[2,41],24:[2,31],62:[2,44],89:[2,65],112:[2,45],115:[2,60],120:[2,47],128:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log('<Form Feed>');
break;
case 1:/* console.log('<New Line>'); */
break;
case 2:/* console.log('<Carriage Return>'); */
break;
case 3:console.log('<Horizontal Tabulator>');			return 64;
break;
case 4:console.log('<Vertical Tabulator>');
break;
case 5:console.log('<ESPACIO>');
break;
case 6:console.log('<COMENTARIO>');
break;
case 7:console.log('<COMENTARIO_MULTILINEA>'+'<'+yy_.yytext+'>');
break;
case 8:console.log('PUNTO');							return 11;
break;
case 9:console.log('<COMA>'+'<'+yy_.yytext+'>');			return 57;
break;
case 10:console.log('<DOUBLE_PUNTO>'+'<'+yy_.yytext+'>');	return 53;
break;
case 11:console.log('<"=">'+'<'+yy_.yytext+'>');			return 70;
break;
case 12:console.log('<>=>'+'<'+yy_.yytext+'>');			return 33;
break;
case 13:console.log('<<=>'+'<'+yy_.yytext+'>');			return 34;
break;
case 14:console.log('<"==">'+'<'+yy_.yytext+'>');			return 35;
break;
case 15:console.log('<{AD}"=">'+'<'+yy_.yytext+'>');		return 36;
break;
case 16:console.log('<">">'+'<'+yy_.yytext+'>');			return 37;
break;
case 17:console.log('<"<">'+'<'+yy_.yytext+'>');			return 38;
break;
case 18:console.log('<"~">'+'<'+yy_.yytext+'>');			return 39;
break;
case 19:console.log('<"&&">'+'<'+yy_.yytext+'>');			return 25;
break;
case 20:console.log('<"!&">'+'<'+yy_.yytext+'>');          return 26;
break;
case 21:console.log('<[|][|]>'+'<'+yy_.yytext+'>');        return 27;
break;
case 22:console.log('<{AD}>'+'<'+yy_.yytext+'>');          return 28;
break;
case 23:console.log('<true>'+'<'+yy_.yytext+'>');          return 30;
break;
case 24:console.log('<false>'+'<'+yy_.yytext+'>');         return 31;
break;
case 25:console.log('<"-">'+'<'+yy_.yytext+'>');return 20;
break;
case 26:console.log('<"^">'+'<'+yy_.yytext+'>');return 15;
break;
case 27:console.log('<"*">'+'<'+yy_.yytext+'>');return 16;
break;
case 28:console.log('<"/">'+'<'+yy_.yytext+'>');return 17;
break;
case 29:console.log('<"%">'+'<'+yy_.yytext+'>');return 18;
break;
case 30:console.log('<"+">'+'<'+yy_.yytext+'>');return 19;
break;
case 31:console.log('<[(]>'+'<'+yy_.yytext+'>');return 21;
break;
case 32:console.log('<[)]>'+'<'+yy_.yytext+'>');return 22;
break;
case 33:console.log('<"importar">'+'<'+yy_.yytext+'>');return 9;
break;
case 34:console.log('<"incerteza">'+'<'+yy_.yytext+'>');return 13;
break;
case 35:console.log('<"clr">'+'<'+yy_.yytext+'>');return 12;
break;
case 36:console.log('<"Double">'+'<'+yy_.yytext+'>');return 47;
break;
case 37:console.log('<"Boolean">'+'<'+yy_.yytext+'>');return 48;
break;
case 38:console.log('<"String">'+'<'+yy_.yytext+'>');return 49;
break;
case 39:console.log('<"Int">'+'<'+yy_.yytext+'>');return 50;
break;
case 40:console.log('<"Char">'+'<'+yy_.yytext+'>');return 51;
break;
case 41:console.log('<"Void">'+'<'+yy_.yytext+'>');return 43;
break;
case 42:console.log('<NUMERO>'+'<'+yy_.yytext+'>');return 23;
break;
case 43:console.log('<ID>'+'<'+yy_.yytext+'>');return 10;
break;
case 44: /* yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); */console.log('<STRING>'+'<'+yy_.yytext+'>'); return 49; 
break;
case 45:console.log('<"ERROR">'+'<'+yy_.yytext+'>');
break;
case 46:return 5;
break;
}
},
rules: [/^(?:\f)/,/^(?:\n)/,/^(?:\r)/,/^(?:\t|[\s][\s][\s][\s])/,/^(?:\v)/,/^(?:\s)/,/^(?:([!])([!]).*)/,/^(?:((')(')('))[^\'\'\']*((')(')(')))/,/^(?:[.])/,/^(?:[,])/,/^(?::)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:([!])=)/,/^(?:>)/,/^(?:<)/,/^(?:~)/,/^(?:&&)/,/^(?:!&)/,/^(?:[|][|])/,/^(?:([!]))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:-)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:[(])/,/^(?:\))/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:clr\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z0-9][a-zA-Z0-9]+)/,/^(?:"[^\"]*")/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = importaciones;
exports.Parser = importaciones.Parser;
exports.parse = function () { return importaciones.parse.apply(importaciones, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}